show_help() {
cat << EOF
Usage: ${0##*/} [-hv] [-f OUTFILE] [FILE]...
Run code and edit it in the same window...
    
    -h          display this help and exit
    -l LANGUAGE Language to use
    -f INFILE   the file to run and edit
EOF
} 

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
input_file=""
language="golang"

while getopts "h?l:f:" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit
        ;;
    l)  language=$OPTARG
        ;;
    f)  input_file=$OPTARG
        ;;
    esac
done

shift $((OPTIND-1))

langs_node="node /app/$(basename $input_file)" 
langs_golang="go run /app/$(basename $input_file)"

lang=langs_$language

[ "$1" = "--" ] && shift
echo "language=$language, input_file='$input_file', Leftovers: $@"
session="$language"
tmux new -d -s "$session" "vim $input_file"

cleanup(){
    docker kill $session > /dev/null 2>&1
    docker rm $session > /dev/null 2>&1
}

trap cleanup EXIT
tmux bind-key -n 'C-x' kill-window -t $session
# tmux set-option -t "$session" mouse-resize-pane on
# tmux set-option -t "$session" mouse-select-pane on
tmux split -t "$session" -h "docker run --name '$session' -t -v $(dirname $(grealpath ${input_file})):/app:ro ${language} watch $(eval echo \$$lang)"
tmux select-pane -t "$session" -L
tmux attach -t "$session"

# end of file